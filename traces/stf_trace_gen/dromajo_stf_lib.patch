diff --git a/CMakeLists.txt b/CMakeLists.txt
index a3f932a..70c6cb3 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -39,7 +39,7 @@
 #
 
 cmake_minimum_required(VERSION 2.8)
-set(CMAKE_CXX_STANDARD 11)
+set(CMAKE_CXX_STANDARD 17)
 project(dromajo)
 option(TRACEOS "TRACEOS" OFF)
 option(SIMPOINT "SIMPOINT" OFF)
@@ -138,6 +138,22 @@ else ()
   target_link_libraries(dromajo_cosim_test dromajo_cosim)
 endif ()
 
+################################################################################
+# STF
+set(DISABLE_STF_DOXYGEN 1)
+set(NO_STF_LTO 1)
+set(STF_LIB_BASE ${PROJECT_SOURCE_DIR}/stf_lib)
+include(${STF_LIB_BASE}/cmake/stf-config.cmake)
+
+include_directories(${STF_LIB_BASE})
+target_link_directories(dromajo PRIVATE ${STF_LIB_BASE}/build/lib)
+target_link_libraries(dromajo ${STF_LINK_LIBS})
+
+# Add STF library to the build
+add_subdirectory (${STF_LIB_BASE})
+
+################################################################################
+
 if (${CMAKE_HOST_APPLE})
     include_directories(/usr/local/include /usr/local/include/libelf /opt/homebrew/include /opt/homebrew/include/libelf)
     target_link_libraries(dromajo_cosim -L/usr/local/lib -L/opt/homebrew/lib -lelf)
diff --git a/include/dromajo_template.h b/include/dromajo_template.h
index 2d8e9cc..8b1684d 100644
--- a/include/dromajo_template.h
+++ b/include/dromajo_template.h
@@ -52,6 +52,8 @@
 #error unsupported XLEN
 #endif
 
+#include <limits>
+
 static inline intx_t glue(div, XLEN)(intx_t a, intx_t b) {
     if (b == 0) {
         return -1;
@@ -278,6 +280,7 @@ int no_inline glue(riscv_cpu_interp, XLEN)(RISCVCPUState *s, int n_cycles) {
     }
 
     s->pending_exception = -1;
+    s->last_data_vaddr = std::numeric_limits<decltype(s->last_data_vaddr)>::max();
     n_cycles++;
     /* Note: we assume NULL is represented as a zero number */
     code_ptr          = NULL;
diff --git a/include/machine.h b/include/machine.h
index c359091..6bf16b3 100644
--- a/include/machine.h
+++ b/include/machine.h
@@ -205,6 +205,7 @@ typedef struct VirtMachine {
     char *   terminate_event;
     uint64_t maxinsns;
     uint64_t trace;
+    const char * stf_trace = nullptr;
 
     /* For co-simulation only, they are -1 if nothing is pending. */
     bool cosim;
diff --git a/include/riscv_cpu.h b/include/riscv_cpu.h
index 2f71c99..2de97a3 100644
--- a/include/riscv_cpu.h
+++ b/include/riscv_cpu.h
@@ -202,6 +202,9 @@ typedef struct RISCVCPUState {
     int          most_recently_written_reg;
 
     target_ulong last_data_paddr;
+    target_ulong last_data_vaddr = -1;
+    target_ulong last_data_size  = -1;
+    target_ulong last_data_type  = -1; // 0 == read, 1 == write
 #ifdef GOLDMEM_INORDER
     target_ulong last_data_value;
 #endif
diff --git a/run/boot.cfg b/run/boot.cfg
index b220030..d80fb22 100644
--- a/run/boot.cfg
+++ b/run/boot.cfg
@@ -5,6 +5,6 @@
     "bios":"fw_jump.bin",
     "kernel":"Image",
     "initrd":"rootfs.cpio",
-    "cmdline": "root=/dev/ram rw earlycon=sbi console=hvc0 bench=spec06_gcc",
+    "cmdline": "root=/dev/ram rw earlycon=sbi console=hvc0",
     "memory_base_addr":0x80000000
 }
diff --git a/src/dromajo.cpp b/src/dromajo.cpp
index c13239a..e27f709 100644
--- a/src/dromajo.cpp
+++ b/src/dromajo.cpp
@@ -46,6 +46,11 @@
 #include "dromajo_cosim.h"
 #endif
 
+
+#include "../../trace_macros.h"
+#include "stf-inc/stf_writer.hpp"
+#include "stf-inc/stf_record_types.hpp"
+
 #ifdef SIMPOINT_BB
 FILE *simpoint_bb_file = nullptr;
 int   simpoint_roi     = 0;  // start without ROI enabled
@@ -121,6 +126,14 @@ int simpoint_step(RISCVMachine *m, int hartid) {
 }
 #endif
 
+////////////////////////////////////////////////////////////////////////////////
+// STF Writing
+stf::STFWriter stf_writer;
+bool tracing_enabled = false;
+uint64_t stf_prog_asid = 0;
+uint64_t stf_count = 0;
+////////////////////////////////////////////////////////////////////////////////
+
 static int iterate_core(RISCVMachine *m, int hartid, int n_cycles) {
     m->common.maxinsns -= n_cycles;
 
@@ -143,10 +156,96 @@ static int iterate_core(RISCVMachine *m, int hartid, int n_cycles) {
         n_cycles = 1;
         do_trace = true;
     } else
-      m->common.trace -= n_cycles;
+        m->common.trace -= n_cycles;
 
     int keep_going = virt_machine_run(m, hartid, n_cycles);
 
+    if(m->common.stf_trace) {
+        // check for start trace marker
+        if(insn_raw == START_TRACE_OPC)
+        {
+            tracing_enabled = true;
+            fprintf(dromajo_stderr, ">>> DROMAJO: Tracing Started at 0x%lx\n", virt_machine_get_pc(m, 0));
+            stf_prog_asid = (cpu->satp >> 4) & 0xFFFF;
+            if((bool)stf_writer == false) {
+                stf_writer.open(m->common.stf_trace);
+                stf_writer.
+                    addTraceInfo(stf::TraceInfoRecord(stf::STF_GEN::STF_GEN_DROMAJO, 1, 1, 0,
+                                                      "Trace from Dromajo"));
+                stf_writer.setISA(stf::ISA::RISCV);
+                stf_writer.setHeaderIEM(stf::INST_IEM::STF_INST_IEM_RV64);
+                stf_writer.setTraceFeature(stf::TRACE_FEATURES::STF_CONTAIN_RV64);
+                stf_writer.setTraceFeature(stf::TRACE_FEATURES::STF_CONTAIN_PHYSICAL_ADDRESS);
+                stf_writer.setHeaderPC(virt_machine_get_pc(m, 0));
+                stf_writer.finalizeHeader();
+            }
+
+            return keep_going;
+        }
+        else if (insn_raw == STOP_TRACE_OPC) {
+            tracing_enabled = false;
+            stf_writer.close();
+            fprintf(dromajo_stderr, ">>> DROMAJO: Tracing Stopped at 0x%lx\n", virt_machine_get_pc(m, 0));
+            fprintf(dromajo_stderr, ">>> DROMAJO: Traced %ld insts\n", stf_count);
+        }
+
+        if(tracing_enabled)
+        {
+            // Only trace in user priv and the same application that
+            // started the trace
+            if((priv == 0) &&
+               (cpu->pending_exception == -1) &&
+               (stf_prog_asid == ((cpu->satp >> 4) & 0xFFFF)))
+            {
+                ++stf_count;
+                const uint32_t inst_width = ((insn_raw & 0x3) == 0x3) ? 4 : 2;
+                bool skip_record = false;
+
+                // See if the instruction changed control flow or a
+                // possible not-taken branch conditional
+                if(cpu->info != ctf_nop) {
+                    stf_writer << stf::InstPCTargetRecord(virt_machine_get_pc(m, 0));
+                }
+                else {
+                    // Not sure what's going on, but there's a
+                    // possibility that the current instruction will
+                    // cause a page fault or a timer interrupt or
+                    // process switch so the next instruction might
+                    // not be on the program's path
+                    if(cpu->pc != last_pc + inst_width) {
+                        skip_record = true;
+                    }
+                }
+
+                // Record the instruction trace record
+                if(false == skip_record)
+                {
+                    // If the last instruction were a load/store,
+                    // record the last vaddr, size, and if it were a
+                    // read or write.
+                    if(cpu->last_data_vaddr != std::numeric_limits<decltype(cpu->last_data_vaddr)>::max())
+                    {
+                        stf_writer << stf::InstMemAccessRecord(cpu->last_data_vaddr,
+                                                               cpu->last_data_size,
+                                                               0,
+                                                               (cpu->last_data_type == 0) ?
+                                                               stf::INST_MEM_ACCESS::READ :
+                                                               stf::INST_MEM_ACCESS::WRITE);
+                        stf_writer << stf::InstMemContentRecord(0); // empty content for now
+                    }
+
+                    if(inst_width == 4) {
+                        stf_writer << stf::InstOpcode32Record(insn_raw);
+                    }
+                    else {
+                        stf_writer << stf::InstOpcode16Record(insn_raw & 0xFFFF);
+                    }
+                }
+            }
+        }
+        return keep_going;
+    }
+
     if (!do_trace) {
         return keep_going;
     }
@@ -223,7 +322,7 @@ int main(int argc, char **argv) {
     if (!m)
         return 1;
 
-    int n_cycles = 10000;
+    int n_cycles = 1;
     execution_start_ts = get_current_time_in_seconds();
     execution_progress_meassure = &m->cpu_state[0]->minstret;
     signal(SIGINT, sigintr_handler);
diff --git a/src/dromajo_main.cpp b/src/dromajo_main.cpp
index aeb1912..2fdaef2 100644
--- a/src/dromajo_main.cpp
+++ b/src/dromajo_main.cpp
@@ -560,6 +560,7 @@ static void usage(const char *prog, const char *msg) {
             "       --maxinsns terminates execution after a number of instructions\n"
             "       --terminate-event name of the validate event to terminate execution\n"
             "       --trace start trace dump after a number of instructions. Trace disabled by default\n"
+	     "       --stf_trace <filename>  Dump an STF trace to the given file\n"
             "       --ignore_sbi_shutdown continue simulation even upon seeing the SBI_SHUTDOWN call\n"
             "       --dump_memories dump memories that could be used to load a cosimulation\n"
             "       --memory_size sets the memory size in MiB (default 256 MiB)\n"
@@ -618,6 +619,7 @@ RISCVMachine *virt_machine_main(int argc, char **argv) {
     long        ncpus                    = 0;
     uint64_t    maxinsns                 = 0;
     uint64_t    trace                    = UINT64_MAX;
+    const char *stf_trace                = nullptr;
     long        memory_size_override     = 0;
     uint64_t    memory_addr_override     = 0;
     bool        ignore_sbi_shutdown      = false;
@@ -640,7 +642,7 @@ RISCVMachine *virt_machine_main(int argc, char **argv) {
     bool        allow_ctrlc              = false;
 
     dromajo_stdout = stdout;
-    dromajo_stderr = stderr;
+    dromajo_stderr = stdout;
 
     optind = 0;
 
@@ -654,6 +656,7 @@ RISCVMachine *virt_machine_main(int argc, char **argv) {
             {"save",                    required_argument, 0,  's' },
             {"simpoint",                required_argument, 0,  'S' },
             {"maxinsns",                required_argument, 0,  'm' }, // CFG
+	     {"stf_trace",               required_argument, 0,  'z' },
             {"trace   ",                required_argument, 0,  't' },
             {"ignore_sbi_shutdown",     required_argument, 0,  'P' }, // CFG
             {"dump_memories",                 no_argument, 0,  'D' }, // CFG
@@ -734,6 +737,10 @@ RISCVMachine *virt_machine_main(int argc, char **argv) {
                 trace = (uint64_t)atoll(optarg);
                 break;
 
+	    case 'z':
+		stf_trace = strdup(optarg);
+		break;
+
             case 'P': ignore_sbi_shutdown = true; break;
 
             case 'D': dump_memories = true; break;
@@ -1058,6 +1065,7 @@ RISCVMachine *virt_machine_main(int argc, char **argv) {
 
     s->common.snapshot_save_name = snapshot_save_name;
     s->common.trace              = trace;
+    s->common.stf_trace          = stf_trace;
 
     // Allow the command option argument to overwrite the value
     // specified in the configuration file
diff --git a/src/riscv_cpu.cpp b/src/riscv_cpu.cpp
index c7e8926..9c49919 100644
--- a/src/riscv_cpu.cpp
+++ b/src/riscv_cpu.cpp
@@ -153,6 +153,9 @@ static inline void track_write(RISCVCPUState *s, uint64_t vaddr, uint64_t paddr,
 #endif
     //printf("track.st[%llx:%llx]=%llx\n", paddr, paddr+size-1, data);
     s->last_data_paddr = paddr;
+    s->last_data_vaddr = vaddr;
+    s->last_data_size  = size;
+    s->last_data_type  = 1;
 #ifdef GOLDMEM_INORDER
     s->last_data_value = data;
 #endif
@@ -163,6 +166,9 @@ static inline uint64_t track_dread(RISCVCPUState *s, uint64_t vaddr, uint64_t pa
     s->machine->llc->read(paddr);
 #endif
     s->last_data_paddr = paddr;
+    s->last_data_vaddr = vaddr;
+    s->last_data_size  = size;
+    s->last_data_type  = 0;
     //printf("track.ld[%llx:%llx]=%llx\n", paddr, paddr+size-1, data);
 
     return data;
diff --git a/src/riscv_machine.cpp b/src/riscv_machine.cpp
index 195fe40..d110a5d 100644
--- a/src/riscv_machine.cpp
+++ b/src/riscv_machine.cpp
@@ -413,8 +413,9 @@ static void plic_set_irq(void *opaque, int irq_num, int state) {
     }
 }
 
-static uint8_t *get_ram_ptr(RISCVMachine *s, uint64_t paddr) {
+static uint8_t *get_ram_ptr(RISCVMachine *s, uint64_t paddr, size_t size = 0) {
     PhysMemoryRange *pr = get_phys_mem_range(s->mem_map, paddr);
+    assert(size < pr->size);
     if (!pr || !pr->is_ram)
         return NULL;
     return pr->phys_mem + (uintptr_t)(paddr - pr->addr);
@@ -891,7 +892,7 @@ void load_elf_image(RISCVMachine *s, const uint8_t *image, size_t image_len) {
                    can't fix this without a substantial rewrite as the handling of IO devices
                    depends on this. */
                 cpu_register_ram(s->mem_map, ph->p_vaddr, rounded_size, 0);
-            memcpy(get_ram_ptr(s, ph->p_vaddr), image + ph->p_offset, ph->p_filesz);
+	    memcpy(get_ram_ptr(s, ph->p_vaddr, ph->p_filesz), image + ph->p_offset, ph->p_filesz);
         }
 }
 
