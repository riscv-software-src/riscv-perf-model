diff --git a/CMakeLists.txt b/CMakeLists.txt
index a3f932a..9c93d56 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -39,7 +39,7 @@
 #
 
 cmake_minimum_required(VERSION 2.8)
-set(CMAKE_CXX_STANDARD 11)
+set(CMAKE_CXX_STANDARD 17)
 project(dromajo)
 option(TRACEOS "TRACEOS" OFF)
 option(SIMPOINT "SIMPOINT" OFF)
@@ -50,7 +50,7 @@ option(WARMUP "WARMUP" OFF)
 
 add_compile_options(
         -g
-        -std=c++11
+        -std=c++17
         -g
         -Wall
         -Wno-parentheses
@@ -138,6 +138,22 @@ else ()
   target_link_libraries(dromajo_cosim_test dromajo_cosim)
 endif ()
 
+################################################################################
+# STF
+set(DISABLE_STF_DOXYGEN 1)
+set(NO_STF_LTO 1)
+set(STF_LIB_BASE ${PROJECT_SOURCE_DIR}/stf_lib)
+include(${STF_LIB_BASE}/cmake/stf-config.cmake)
+
+include_directories(${STF_LIB_BASE})
+target_link_directories(dromajo PRIVATE ${STF_LIB_BASE}/build/lib)
+target_link_libraries(dromajo ${STF_LINK_LIBS})
+
+# Add STF library to the build
+add_subdirectory (${STF_LIB_BASE})
+
+################################################################################
+
 if (${CMAKE_HOST_APPLE})
     include_directories(/usr/local/include /usr/local/include/libelf /opt/homebrew/include /opt/homebrew/include/libelf)
     target_link_libraries(dromajo_cosim -L/usr/local/lib -L/opt/homebrew/lib -lelf)
diff --git a/include/dromajo_template.h b/include/dromajo_template.h
index 2d8e9cc..7c54bfd 100644
--- a/include/dromajo_template.h
+++ b/include/dromajo_template.h
@@ -52,6 +52,13 @@
 #error unsupported XLEN
 #endif
 
+#include "../../trace_macros.h"
+#include "stf-inc/stf_writer.hpp"
+#include "stf-inc/stf_record_types.hpp"
+extern stf::STFWriter stf_writer;
+
+#include <limits>
+
 static inline intx_t glue(div, XLEN)(intx_t a, intx_t b) {
     if (b == 0) {
         return -1;
@@ -278,6 +285,7 @@ int no_inline glue(riscv_cpu_interp, XLEN)(RISCVCPUState *s, int n_cycles) {
     }
 
     s->pending_exception = -1;
+    s->last_data_vaddr = std::numeric_limits<decltype(s->last_data_vaddr)>::max();
     n_cycles++;
     /* Note: we assume NULL is represented as a zero number */
     code_ptr          = NULL;
@@ -1807,6 +1815,92 @@ int no_inline glue(riscv_cpu_interp, XLEN)(RISCVCPUState *s, int n_cycles) {
         }
         /* update PC for next instruction */
     jump_insn:;
+
+
+        // HERE HERE stf trace support
+      if(s->machine->common.vm_stf_trace) { //if cmd line specifies tracing
+
+        int hartid = 0; //FIXME
+        RISCVCPUState *cpu = s->machine->cpu_state[hartid];
+
+        bool isStart = insn == START_TRACE_OPC;
+        bool isStop  = insn == STOP_TRACE_OPC;
+        
+        if(isStart) {
+          s->machine->common.vm_stf_trace_enabled = true;
+          fprintf(dromajo_stderr, ">>> DROMAJO: Tracing Started at 0x%lx\n", GET_PC());
+
+          s->machine->common.vm_stf_prog_asid = (cpu->satp >> 4) & 0xFFFF;          
+
+          if((bool)stf_writer == false) {
+            stf_writer.open(s->machine->common.vm_stf_trace);
+            stf_writer.addTraceInfo(stf::TraceInfoRecord(
+                       stf::STF_GEN::STF_GEN_DROMAJO, 1, 1, 0,"Trace from Dromajo"));
+            stf_writer.setISA(stf::ISA::RISCV);
+            stf_writer.setHeaderIEM(stf::INST_IEM::STF_INST_IEM_RV64);
+            stf_writer.setTraceFeature(stf::TRACE_FEATURES::STF_CONTAIN_RV64);
+            stf_writer.setTraceFeature(stf::TRACE_FEATURES::STF_CONTAIN_PHYSICAL_ADDRESS);
+            stf_writer.setHeaderPC(GET_PC());
+            stf_writer.finalizeHeader();
+          }
+        } else if(isStop) {
+          s->machine->common.vm_stf_trace_enabled = false;
+          fprintf(dromajo_stderr, ">>> DROMAJO: Tracing Stopped at 0x%lx\n", GET_PC());
+          fprintf(dromajo_stderr, ">>> DROMAJO: Traced %ld insts\n",
+                                   s->machine->common.vm_stf_count);
+          stf_writer.close();
+        }
+
+        if(!isStart && s->machine->common.vm_stf_trace_enabled) {
+
+          //int priv = riscv_get_priv_level(cpu);
+          uint32_t insn_raw = insn;
+          uint64_t last_pc  = virt_machine_get_pc(s->machine, hartid);
+
+          if(s->machine->common.vm_no_stf_priv_check
+             || ((s->priv == 0)
+                 && (cpu->pending_exception == -1)
+                 && (s->machine->common.vm_stf_prog_asid == ((cpu->satp >> 4) & 0xFFFF))))
+          {
+            ++s->machine->common.vm_stf_count;
+            const uint32_t inst_width = ((insn_raw & 0x3) == 0x3) ? 4 : 2;
+            bool skip_record = false;
+            if(cpu->info != ctf_nop) {
+              stf_writer << stf::InstPCTargetRecord(GET_PC());
+            } else {
+
+              if(GET_PC() != last_pc + inst_width) {
+                  skip_record = true;
+              }
+            }
+
+            if(false == skip_record)
+            {
+              // If the last instruction were a load/store,
+              // record the last vaddr, size, and if it were a
+              // read or write.
+              if(cpu->last_data_vaddr
+                   != std::numeric_limits<decltype(cpu->last_data_vaddr)>::max())
+              {
+                  stf_writer << stf::InstMemAccessRecord(cpu->last_data_vaddr,
+                                                         cpu->last_data_size,
+                                                         0,
+                                                         (cpu->last_data_type == 0) ?
+                                                         stf::INST_MEM_ACCESS::READ :
+                                                         stf::INST_MEM_ACCESS::WRITE);
+                  stf_writer << stf::InstMemContentRecord(0); // empty content for now
+              }
+              
+              if(inst_width == 4) {
+                  stf_writer << stf::InstOpcode32Record(insn_raw);
+              }
+              else {
+                  stf_writer << stf::InstOpcode16Record(insn_raw & 0xFFFF);
+              }
+            }
+          }
+        }
+      }
     } /* end of main loop */
 illegal_insn:
     s->pending_exception = CAUSE_ILLEGAL_INSTRUCTION;
diff --git a/include/machine.h b/include/machine.h
index c359091..ed6dac8 100644
--- a/include/machine.h
+++ b/include/machine.h
@@ -142,6 +142,8 @@ typedef struct {
     VMEthEntry       tab_eth[MAX_ETH_DEVICE];
     int              eth_count;
     uint64_t         htif_base_addr;
+    uint64_t         htif_tohost;
+    uint64_t         htif_fromhost;
 
     char *cmdline;      /* bios or kernel command line */
     BOOL  accel_enable; /* enable acceleration (KVM) */
@@ -206,6 +208,13 @@ typedef struct VirtMachine {
     uint64_t maxinsns;
     uint64_t trace;
 
+    const char *   vm_stf_trace = nullptr; //stf file
+    bool           vm_stf_trace_enabled; 
+    bool           vm_no_stf_priv_check; //disable privilege checks in trace generation
+    uint64_t       vm_stf_prog_asid;
+    uint64_t       vm_stf_count;
+    uint64_t       vm_stf_first;
+
     /* For co-simulation only, they are -1 if nothing is pending. */
     bool cosim;
     int  pending_interrupt;
diff --git a/include/riscv_cpu.h b/include/riscv_cpu.h
index 2f71c99..2de97a3 100644
--- a/include/riscv_cpu.h
+++ b/include/riscv_cpu.h
@@ -202,6 +202,9 @@ typedef struct RISCVCPUState {
     int          most_recently_written_reg;
 
     target_ulong last_data_paddr;
+    target_ulong last_data_vaddr = -1;
+    target_ulong last_data_size  = -1;
+    target_ulong last_data_type  = -1; // 0 == read, 1 == write
 #ifdef GOLDMEM_INORDER
     target_ulong last_data_value;
 #endif
diff --git a/src/dromajo.cpp b/src/dromajo.cpp
index c13239a..0cb0754 100644
--- a/src/dromajo.cpp
+++ b/src/dromajo.cpp
@@ -46,6 +46,10 @@
 #include "dromajo_cosim.h"
 #endif
 
+#include "stf-inc/stf_writer.hpp"
+#include "stf-inc/stf_record_types.hpp"
+stf::STFWriter stf_writer;
+
 #ifdef SIMPOINT_BB
 FILE *simpoint_bb_file = nullptr;
 int   simpoint_roi     = 0;  // start without ROI enabled
diff --git a/src/dromajo_cosim.cpp b/src/dromajo_cosim.cpp
index 24faded..2ae8bbf 100644
--- a/src/dromajo_cosim.cpp
+++ b/src/dromajo_cosim.cpp
@@ -27,6 +27,11 @@
 #include "iomem.h"
 #include "riscv_machine.h"
 
+//STF: cosim shares riscv_cpu_interp, dromajo_template.h
+#include "stf-inc/stf_writer.hpp"
+#include "stf-inc/stf_record_types.hpp"
+stf::STFWriter stf_writer; 
+
 #ifdef GOLDMEM_INORDER
 void check_inorder_load(int cid, uint64_t addr, uint8_t sz, uint64_t ld_data, bool io_map);
 void check_inorder_store(int cid, uint64_t addr, uint8_t sz, uint64_t st_data, bool io_map);
diff --git a/src/dromajo_main.cpp b/src/dromajo_main.cpp
index aeb1912..3369f79 100644
--- a/src/dromajo_main.cpp
+++ b/src/dromajo_main.cpp
@@ -560,6 +560,7 @@ static void usage(const char *prog, const char *msg) {
             "       --maxinsns terminates execution after a number of instructions\n"
             "       --terminate-event name of the validate event to terminate execution\n"
             "       --trace start trace dump after a number of instructions. Trace disabled by default\n"
+            "       --stf_trace <filename>  Dump an STF trace to the given file\n"
             "       --ignore_sbi_shutdown continue simulation even upon seeing the SBI_SHUTDOWN call\n"
             "       --dump_memories dump memories that could be used to load a cosimulation\n"
             "       --memory_size sets the memory size in MiB (default 256 MiB)\n"
@@ -571,6 +572,7 @@ static void usage(const char *prog, const char *msg) {
             "       --plic START:SIZE set PLIC start address and size in B (defaults to 0x%lx:0x%lx)\n"
             "       --clint START:SIZE set CLINT start address and size in B (defaults to 0x%lx:0x%lx)\n"
             "       --custom_extension add X extension to misa for all cores\n"
+            "       --no_stf_priv_check Turn off the privledge check in STF generation\n"
 #ifdef LIVECACHE
             "       --live_cache_size live cache warmup for checkpoint (default 8M)\n"
 #endif
@@ -618,10 +620,12 @@ RISCVMachine *virt_machine_main(int argc, char **argv) {
     long        ncpus                    = 0;
     uint64_t    maxinsns                 = 0;
     uint64_t    trace                    = UINT64_MAX;
+    const char *stf_trace                = NULL;
     long        memory_size_override     = 0;
     uint64_t    memory_addr_override     = 0;
     bool        ignore_sbi_shutdown      = false;
     bool        dump_memories            = false;
+    bool        no_stf_priv_check        = false;
     char *      bootrom_name             = 0;
     char *      dtb_name                 = 0;
     bool        compact_bootrom          = false;
@@ -655,6 +659,7 @@ RISCVMachine *virt_machine_main(int argc, char **argv) {
             {"simpoint",                required_argument, 0,  'S' },
             {"maxinsns",                required_argument, 0,  'm' }, // CFG
             {"trace   ",                required_argument, 0,  't' },
+            {"stf_trace",               required_argument, 0,  'z' },
             {"ignore_sbi_shutdown",     required_argument, 0,  'P' }, // CFG
             {"dump_memories",                 no_argument, 0,  'D' }, // CFG
             {"memory_size",             required_argument, 0,  'M' }, // CFG
@@ -668,6 +673,7 @@ RISCVMachine *virt_machine_main(int argc, char **argv) {
             {"custom_extension",              no_argument, 0,  'u' }, // CFG
             {"clear_ids",                     no_argument, 0,  'L' }, // CFG
             {"ctrlc",                         no_argument, 0,  'X' },
+            {"no_stf_priv_check",             no_argument, 0,  'a' },
 #ifdef LIVECACHE
             {"live_cache_size",         required_argument, 0,  'w' }, // CFG
 #endif
@@ -734,6 +740,9 @@ RISCVMachine *virt_machine_main(int argc, char **argv) {
                 trace = (uint64_t)atoll(optarg);
                 break;
 
+            case 'z': stf_trace = strdup(optarg); break;
+            case 'a': no_stf_priv_check = true; break;
+
             case 'P': ignore_sbi_shutdown = true; break;
 
             case 'D': dump_memories = true; break;
@@ -1059,6 +1068,10 @@ RISCVMachine *virt_machine_main(int argc, char **argv) {
     s->common.snapshot_save_name = snapshot_save_name;
     s->common.trace              = trace;
 
+    s->common.vm_stf_trace         = stf_trace;
+    s->common.vm_no_stf_priv_check = no_stf_priv_check;
+    s->common.vm_stf_trace_enabled = false;
+
     // Allow the command option argument to overwrite the value
     // specified in the configuration file
     if (maxinsns > 0) {
diff --git a/src/riscv_cpu.cpp b/src/riscv_cpu.cpp
index c7e8926..9c49919 100644
--- a/src/riscv_cpu.cpp
+++ b/src/riscv_cpu.cpp
@@ -153,6 +153,9 @@ static inline void track_write(RISCVCPUState *s, uint64_t vaddr, uint64_t paddr,
 #endif
     //printf("track.st[%llx:%llx]=%llx\n", paddr, paddr+size-1, data);
     s->last_data_paddr = paddr;
+    s->last_data_vaddr = vaddr;
+    s->last_data_size  = size;
+    s->last_data_type  = 1;
 #ifdef GOLDMEM_INORDER
     s->last_data_value = data;
 #endif
@@ -163,6 +166,9 @@ static inline uint64_t track_dread(RISCVCPUState *s, uint64_t vaddr, uint64_t pa
     s->machine->llc->read(paddr);
 #endif
     s->last_data_paddr = paddr;
+    s->last_data_vaddr = vaddr;
+    s->last_data_size  = size;
+    s->last_data_type  = 0;
     //printf("track.ld[%llx:%llx]=%llx\n", paddr, paddr+size-1, data);
 
     return data;
